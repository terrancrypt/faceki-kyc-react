import React, { useRef, useCallback, useState } from "react";
import Webcam from "react-webcam";
import {
  Camera,
  RotateCcw,
  Check,
  AlertCircle,
  FlipCamera,
} from "lucide-react";
import type { DocumentType, DocumentSide } from "../hooks/useKYCFlow";

interface DocumentCaptureProps {
  documentType: DocumentType;
  documentSide: DocumentSide;
  onCapture: (side: DocumentSide, photoData: string) => void;
  onBack: () => void;
  videoConstraints: any;
}

const DocumentCapture: React.FC<DocumentCaptureProps> = ({
  documentType,
  documentSide,
  onCapture,
  onBack,
  videoConstraints,
}) => {
  const webcamRef = useRef<Webcam>(null);
  // const canvasRef = useRef<HTMLCanvasElement>(null);
  const [isCapturing, setIsCapturing] = useState(false);
  const [capturedImage, setCapturedImage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isBackCamera, setIsBackCamera] = useState(false);

  // T·∫°o videoConstraints ƒë·ªông d·ª±a tr√™n camera hi·ªán t·∫°i
  const currentVideoConstraints = {
    ...videoConstraints,
    facingMode: isBackCamera ? "environment" : "user",
  };

  const toggleCamera = useCallback(() => {
    setIsBackCamera(!isBackCamera);
    setCapturedImage(null); // Reset captured image when switching camera
  }, [isBackCamera]);

  const capturePhoto = useCallback(() => {
    if (!webcamRef.current) return;

    setIsCapturing(true);
    setError(null);

    try {
      const imageSrc = webcamRef.current.getScreenshot();
      if (imageSrc) {
        setCapturedImage(imageSrc);
      } else {
        setError("Kh√¥ng th·ªÉ ch·ª•p ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } catch (err) {
      setError("L·ªói khi ch·ª•p ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setIsCapturing(false);
    }
  }, []);

  const retakePhoto = useCallback(() => {
    setCapturedImage(null);
    setError(null);
    // Kh√¥ng reset camera khi ch·ª•p l·∫°i ƒë·ªÉ gi·ªØ nguy√™n camera hi·ªán t·∫°i
  }, []);

  const confirmPhoto = useCallback(() => {
    if (capturedImage) {
      onCapture(documentSide, capturedImage);
    }
  }, [capturedImage, documentSide, onCapture]);

  const getDocumentInstructions = () => {
    if (documentType === "id_card") {
      return documentSide === "front"
        ? "ƒê·∫∑t m·∫∑t tr∆∞·ªõc c·ªßa CCCD/CMND v√†o khung h√¨nh"
        : "ƒê·∫∑t m·∫∑t sau c·ªßa CCCD/CMND v√†o khung h√¨nh";
    } else {
      return "ƒê·∫∑t trang th√¥ng tin c·ªßa h·ªô chi·∫øu v√†o khung h√¨nh";
    }
  };

  const getDocumentTitle = () => {
    if (documentType === "id_card") {
      return documentSide === "front"
        ? "M·∫∑t tr∆∞·ªõc CCCD/CMND"
        : "M·∫∑t sau CCCD/CMND";
    } else {
      return "H·ªô chi·∫øu";
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg">
      {/* Header */}
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800 mb-2">
          üìÑ {getDocumentTitle()}
        </h2>
        <p className="text-gray-600">{getDocumentInstructions()}</p>
        <div className="mt-2 text-sm text-blue-600 bg-blue-50 px-3 py-1 rounded-full inline-block">
          üí° C√≥ th·ªÉ chuy·ªÉn ƒë·ªïi camera b·∫±ng n√∫t ·ªü g√≥c tr√™n b√™n ph·∫£i
        </div>
      </div>

      {/* Error Display */}
      {error && (
        <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center gap-2 text-red-700">
            <AlertCircle size={20} />
            {error}
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Camera View */}
        <div className="relative">
          <div className="bg-gray-100 rounded-lg overflow-hidden">
            {!capturedImage ? (
              <div className="relative">
                <Webcam
                  ref={webcamRef}
                  audio={false}
                  screenshotFormat="image/jpeg"
                  videoConstraints={currentVideoConstraints}
                  className="w-full"
                />

                {/* Overlay Guide */}
                <div className="absolute inset-0 pointer-events-none">
                  <div className="absolute inset-4 border-2 border-blue-500 border-dashed rounded-lg">
                    <div className="absolute top-2 left-2 bg-blue-500 text-white px-2 py-1 rounded text-xs">
                      Khung ch·ª•p
                    </div>
                  </div>
                </div>

                {/* Camera Toggle Button */}
                <div className="absolute top-4 right-4">
                  <button
                    onClick={toggleCamera}
                    className="flex items-center gap-2 bg-black bg-opacity-50 text-white px-3 py-2 rounded-lg hover:bg-opacity-70 transition-all"
                    title={
                      isBackCamera
                        ? "Chuy·ªÉn sang camera tr∆∞·ªõc"
                        : "Chuy·ªÉn sang camera sau"
                    }
                  >
                    <FlipCamera size={20} />
                    <span className="text-sm">
                      {isBackCamera ? "Camera tr∆∞·ªõc" : "Camera sau"}
                    </span>
                  </button>
                </div>

                {/* Capture Button */}
                <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2">
                  <button
                    onClick={capturePhoto}
                    disabled={isCapturing}
                    className="flex items-center gap-2 bg-blue-600 text-white px-6 py-3 rounded-full hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg"
                  >
                    <Camera size={24} />
                    {isCapturing ? "ƒêang ch·ª•p..." : "Ch·ª•p ·∫£nh"}
                  </button>
                </div>
              </div>
            ) : (
              <div className="relative">
                <img
                  src={capturedImage}
                  alt="Captured document"
                  className="w-full"
                />

                {/* Action Buttons */}
                <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2">
                  <button
                    onClick={retakePhoto}
                    className="flex items-center gap-2 bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700"
                  >
                    <RotateCcw size={16} />
                    Ch·ª•p l·∫°i
                  </button>
                  <button
                    onClick={confirmPhoto}
                    className="flex items-center gap-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"
                  >
                    <Check size={16} />
                    X√°c nh·∫≠n
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Instructions */}
        <div className="space-y-4">
          <div className="bg-blue-50 p-4 rounded-lg">
            <h3 className="font-semibold text-blue-800 mb-2">
              üìã H∆∞·ªõng d·∫´n ch·ª•p ·∫£nh
            </h3>
            <ul className="text-sm text-blue-700 space-y-2">
              <li>‚Ä¢ ƒê·∫£m b·∫£o gi·∫•y t·ªù n·∫±m g·ªçn trong khung h√¨nh</li>
              <li>‚Ä¢ √Ånh s√°ng ƒë·ªß s√°ng v√† kh√¥ng b·ªã ch√≥i</li>
              <li>‚Ä¢ Gi·∫•y t·ªù ph·∫£i r√µ r√†ng, kh√¥ng b·ªã m·ªù</li>
              <li>‚Ä¢ Kh√¥ng che khu·∫•t th√¥ng tin quan tr·ªçng</li>
              <li>‚Ä¢ C√≥ th·ªÉ chuy·ªÉn sang camera sau ƒë·ªÉ ch·ª•p r√µ h∆°n</li>
            </ul>
          </div>

          <div className="bg-yellow-50 p-4 rounded-lg">
            <h3 className="font-semibold text-yellow-800 mb-2">
              ‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng
            </h3>
            <ul className="text-sm text-yellow-700 space-y-2">
              <li>‚Ä¢ Ch·ªâ hi·ªÉn th·ªã gi·∫•y t·ªù, kh√¥ng ch·ª•p c√°c v·∫≠t kh√°c</li>
              <li>‚Ä¢ ƒê·∫£m b·∫£o camera ·ªïn ƒë·ªãnh khi ch·ª•p</li>
              <li>‚Ä¢ Ki·ªÉm tra ·∫£nh tr∆∞·ªõc khi x√°c nh·∫≠n</li>
            </ul>
          </div>

          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="font-semibold text-gray-800 mb-2">üìä Ti·∫øn ƒë·ªô</h3>
            <div className="flex items-center gap-2">
              <div className="flex-1 bg-gray-200 rounded-full h-2">
                <div
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                  style={{
                    width:
                      documentType === "id_card"
                        ? documentSide === "front"
                          ? "50%"
                          : "100%"
                        : "100%",
                  }}
                ></div>
              </div>
              <span className="text-sm text-gray-600">
                {documentType === "id_card"
                  ? documentSide === "front"
                    ? "1/2"
                    : "2/2"
                  : "1/1"}
              </span>
            </div>
            <p className="text-xs text-gray-500 mt-1">
              {documentType === "id_card"
                ? documentSide === "front"
                  ? "ƒê√£ ch·ª•p m·∫∑t tr∆∞·ªõc"
                  : "ƒê√£ ch·ª•p m·∫∑t sau"
                : "ƒê√£ ch·ª•p h·ªô chi·∫øu"}
            </p>
            <div className="mt-2 pt-2 border-t border-gray-200">
              <p className="text-xs text-gray-500">
                üì∑ Camera hi·ªán t·∫°i:{" "}
                {isBackCamera ? "Camera sau" : "Camera tr∆∞·ªõc"}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="flex justify-between mt-6">
        <button
          onClick={onBack}
          className="flex items-center gap-2 bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700"
        >
          ‚Üê Quay l·∫°i
        </button>

        <div className="text-sm text-gray-500">
          B∆∞·ªõc{" "}
          {documentType === "id_card"
            ? documentSide === "front"
              ? "1"
              : "2"
            : "1"}{" "}
          - Ch·ª•p gi·∫•y t·ªù
        </div>
      </div>
    </div>
  );
};

export default DocumentCapture;
