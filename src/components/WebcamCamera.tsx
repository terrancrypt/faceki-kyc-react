import { useRef, useState, useCallback } from "react";
import { Camera, CameraOff, Download, AlertCircle } from "lucide-react";
import Webcam from "react-webcam";

const WebcamCamera = () => {
  const webcamRef = useRef<Webcam>(null);
  const [isCameraOn, setIsCameraOn] = useState(false);
  const [capturedPhoto, setCapturedPhoto] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Camera constraints
  const videoConstraints = {
    width: 640,
    height: 480,
    facingMode: "user",
  };

  // Start camera
  const startCamera = useCallback(() => {
    setError(null);
    setIsCameraOn(true);
  }, []);

  // Stop camera
  const stopCamera = useCallback(() => {
    setIsCameraOn(false);
    setCapturedPhoto(null);
  }, []);

  // Capture photo
  const capturePhoto = useCallback(() => {
    if (webcamRef.current) {
      const imageSrc = webcamRef.current.getScreenshot();
      if (imageSrc) {
        setCapturedPhoto(imageSrc);
      }
    }
  }, []);

  // Download photo
  const downloadPhoto = useCallback(() => {
    if (!capturedPhoto) return;

    const link = document.createElement("a");
    link.download = `webcam-photo-${new Date().getTime()}.jpg`;
    link.href = capturedPhoto;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }, [capturedPhoto]);

  // Handle camera errors
  const handleUserMediaError = useCallback((error: string | DOMException) => {
    console.error("Camera error:", error);
    let errorMessage = "Kh√¥ng th·ªÉ truy c·∫≠p camera. ";

    if (error instanceof DOMException) {
      if (error.name === "NotAllowedError") {
        errorMessage += "Vui l√≤ng cho ph√©p truy c·∫≠p camera v√† th·ª≠ l·∫°i.";
      } else if (error.name === "NotFoundError") {
        errorMessage +=
          "Kh√¥ng t√¨m th·∫•y camera. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi webcam.";
      } else if (error.name === "NotReadableError") {
        errorMessage += "Camera ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ·ª©ng d·ª•ng kh√°c.";
      } else {
        errorMessage += error.message;
      }
    } else {
      errorMessage += String(error);
    }

    setError(errorMessage);
    setIsCameraOn(false);
  }, []);

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg">
      <h1 className="text-2xl font-bold mb-6 text-center text-gray-800">
        Camera Webcam - React Webcam
      </h1>

      {/* Error display */}
      {error && (
        <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg flex items-center gap-2">
          <AlertCircle className="text-red-500" size={20} />
          <span className="text-red-700">{error}</span>
          <button
            onClick={() => setError(null)}
            className="ml-auto bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700"
          >
            ƒê√≥ng
          </button>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Camera Section */}
        <div className="space-y-4">
          <div
            className="relative bg-black rounded-lg overflow-hidden"
            style={{ aspectRatio: "4/3" }}
          >
            {isCameraOn ? (
              <Webcam
                ref={webcamRef}
                audio={false}
                screenshotFormat="image/jpeg"
                videoConstraints={videoConstraints}
                onUserMediaError={handleUserMediaError}
                className="w-full h-full object-cover"
                style={{ transform: "scaleX(-1)" }}
              />
            ) : (
              <div className="flex items-center justify-center h-full text-gray-400">
                <div className="text-center">
                  <CameraOff size={48} className="mx-auto mb-2" />
                  <p>Camera ch∆∞a ƒë∆∞·ª£c b·∫≠t</p>
                </div>
              </div>
            )}
          </div>

          {/* Camera Controls */}
          <div className="flex gap-3">
            {!isCameraOn ? (
              <button
                onClick={startCamera}
                className="flex-1 flex items-center justify-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
              >
                <Camera size={20} />
                B·∫≠t Camera
              </button>
            ) : (
              <>
                <button
                  onClick={stopCamera}
                  className="flex-1 flex items-center justify-center gap-2 bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700"
                >
                  <CameraOff size={20} />
                  T·∫Øt Camera
                </button>
                <button
                  onClick={capturePhoto}
                  className="flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"
                >
                  üì∏ Ch·ª•p ·∫¢nh
                </button>
              </>
            )}
          </div>

          {/* Camera Info */}
          {isCameraOn && (
            <div className="text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
              <div className="grid grid-cols-2 gap-2">
                <div>
                  Status: <span className="font-medium">ƒêang ho·∫°t ƒë·ªông</span>
                </div>
                <div>
                  Engine: <span className="font-medium">React Webcam</span>
                </div>
                <div>
                  Resolution: <span className="font-medium">640x480</span>
                </div>
                <div>
                  Format: <span className="font-medium">JPEG</span>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Captured Photo Section */}
        <div className="space-y-4">
          <h3 className="text-lg font-semibold text-gray-800">·∫¢nh ƒê√£ Ch·ª•p</h3>

          <div
            className="bg-gray-100 rounded-lg overflow-hidden"
            style={{ aspectRatio: "4/3" }}
          >
            {capturedPhoto ? (
              <img
                src={capturedPhoto}
                alt="·∫¢nh ƒë√£ ch·ª•p"
                className="w-full h-full object-cover"
              />
            ) : (
              <div className="flex items-center justify-center h-full text-gray-400">
                <div className="text-center">
                  <div className="text-4xl mb-2">üì∑</div>
                  <p>Ch∆∞a c√≥ ·∫£nh n√†o ƒë∆∞·ª£c ch·ª•p</p>
                  <p className="text-sm mt-1">Nh·∫•n "üì∏ Ch·ª•p ·∫¢nh" ƒë·ªÉ ch·ª•p</p>
                </div>
              </div>
            )}
          </div>

          {capturedPhoto && (
            <button
              onClick={downloadPhoto}
              className="w-full flex items-center justify-center gap-2 bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700"
            >
              <Download size={20} />
              T·∫£i Xu·ªëng
            </button>
          )}
        </div>
      </div>

      {/* Instructions */}
      <div className="mt-6 p-4 bg-blue-50 rounded-lg">
        <h4 className="font-semibold text-blue-800 mb-2">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</h4>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>1. Nh·∫•n "B·∫≠t Camera" v√† cho ph√©p truy c·∫≠p webcam</li>
          <li>2. Camera s·∫Ω hi·ªÉn th·ªã h√¨nh ·∫£nh t·ª´ webcam c·ªßa b·∫°n</li>
          <li>3. Nh·∫•n "üì∏ Ch·ª•p ·∫¢nh" ƒë·ªÉ ch·ª•p ·∫£nh</li>
          <li>4. Nh·∫•n "T·∫£i Xu·ªëng" ƒë·ªÉ l∆∞u ·∫£nh v·ªÅ m√°y</li>
          <li>5. Nh·∫•n "T·∫Øt Camera" ƒë·ªÉ d·ª´ng camera</li>
        </ul>
      </div>

      {/* Technical Info */}
      <div className="mt-4 text-xs text-gray-500 text-center">
        S·ª≠ d·ª•ng React Webcam | X·ª≠ l√Ω local tr√™n tr√¨nh duy·ªát | H·ªó tr·ª£ ƒëa n·ªÅn t·∫£ng
      </div>
    </div>
  );
};

export default WebcamCamera;
